/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as TasksRouteImport } from './routes/tasks'
import { Route as SignupRouteImport } from './routes/signup'
import { Route as QueueRouteImport } from './routes/queue'
import { Route as LoginRouteImport } from './routes/login'
import { Route as InventoryRouteImport } from './routes/inventory'
import { Route as FieldsRouteImport } from './routes/fields'
import { Route as FarmsRouteImport } from './routes/farms'
import { Route as AnimalsRouteImport } from './routes/animals'
import { Route as IndexRouteImport } from './routes/index'

const TasksRoute = TasksRouteImport.update({
  id: '/tasks',
  path: '/tasks',
  getParentRoute: () => rootRouteImport,
} as any)
const SignupRoute = SignupRouteImport.update({
  id: '/signup',
  path: '/signup',
  getParentRoute: () => rootRouteImport,
} as any)
const QueueRoute = QueueRouteImport.update({
  id: '/queue',
  path: '/queue',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const InventoryRoute = InventoryRouteImport.update({
  id: '/inventory',
  path: '/inventory',
  getParentRoute: () => rootRouteImport,
} as any)
const FieldsRoute = FieldsRouteImport.update({
  id: '/fields',
  path: '/fields',
  getParentRoute: () => rootRouteImport,
} as any)
const FarmsRoute = FarmsRouteImport.update({
  id: '/farms',
  path: '/farms',
  getParentRoute: () => rootRouteImport,
} as any)
const AnimalsRoute = AnimalsRouteImport.update({
  id: '/animals',
  path: '/animals',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/animals': typeof AnimalsRoute
  '/farms': typeof FarmsRoute
  '/fields': typeof FieldsRoute
  '/inventory': typeof InventoryRoute
  '/login': typeof LoginRoute
  '/queue': typeof QueueRoute
  '/signup': typeof SignupRoute
  '/tasks': typeof TasksRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/animals': typeof AnimalsRoute
  '/farms': typeof FarmsRoute
  '/fields': typeof FieldsRoute
  '/inventory': typeof InventoryRoute
  '/login': typeof LoginRoute
  '/queue': typeof QueueRoute
  '/signup': typeof SignupRoute
  '/tasks': typeof TasksRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/animals': typeof AnimalsRoute
  '/farms': typeof FarmsRoute
  '/fields': typeof FieldsRoute
  '/inventory': typeof InventoryRoute
  '/login': typeof LoginRoute
  '/queue': typeof QueueRoute
  '/signup': typeof SignupRoute
  '/tasks': typeof TasksRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/animals'
    | '/farms'
    | '/fields'
    | '/inventory'
    | '/login'
    | '/queue'
    | '/signup'
    | '/tasks'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/animals'
    | '/farms'
    | '/fields'
    | '/inventory'
    | '/login'
    | '/queue'
    | '/signup'
    | '/tasks'
  id:
    | '__root__'
    | '/'
    | '/animals'
    | '/farms'
    | '/fields'
    | '/inventory'
    | '/login'
    | '/queue'
    | '/signup'
    | '/tasks'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AnimalsRoute: typeof AnimalsRoute
  FarmsRoute: typeof FarmsRoute
  FieldsRoute: typeof FieldsRoute
  InventoryRoute: typeof InventoryRoute
  LoginRoute: typeof LoginRoute
  QueueRoute: typeof QueueRoute
  SignupRoute: typeof SignupRoute
  TasksRoute: typeof TasksRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/tasks': {
      id: '/tasks'
      path: '/tasks'
      fullPath: '/tasks'
      preLoaderRoute: typeof TasksRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/signup': {
      id: '/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof SignupRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/queue': {
      id: '/queue'
      path: '/queue'
      fullPath: '/queue'
      preLoaderRoute: typeof QueueRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/inventory': {
      id: '/inventory'
      path: '/inventory'
      fullPath: '/inventory'
      preLoaderRoute: typeof InventoryRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/fields': {
      id: '/fields'
      path: '/fields'
      fullPath: '/fields'
      preLoaderRoute: typeof FieldsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/farms': {
      id: '/farms'
      path: '/farms'
      fullPath: '/farms'
      preLoaderRoute: typeof FarmsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/animals': {
      id: '/animals'
      path: '/animals'
      fullPath: '/animals'
      preLoaderRoute: typeof AnimalsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AnimalsRoute: AnimalsRoute,
  FarmsRoute: FarmsRoute,
  FieldsRoute: FieldsRoute,
  InventoryRoute: InventoryRoute,
  LoginRoute: LoginRoute,
  QueueRoute: QueueRoute,
  SignupRoute: SignupRoute,
  TasksRoute: TasksRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
