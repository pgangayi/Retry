name: CI - root / frontend / backend

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  root:
    name: Root (install & tests if present)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install root deps (if package.json present)
        shell: pwsh
        run: |
          if (Test-Path package.json) { npm ci } else { echo "No root package.json, skipping npm ci" }

      - name: Run root linter (if present)
        shell: pwsh
        run: |
          if (Test-Path package.json) { npm run lint --if-present } else { echo "No root package.json, skipping lint" }

      - name: Run root tests (if present)
        shell: pwsh
        run: |
          if (Test-Path package.json) { npm run test --if-present } else { echo "No root package.json, skipping tests" }

  frontend:
    name: Frontend (Vite)
    runs-on: ubuntu-latest
    needs: root
    steps:
      - uses: actions/checkout@v4

      - name: Check frontend directory
        id: check
        shell: pwsh
        run: |
          if (Test-Path frontend\package.json) { echo "exists=true" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 } else { echo "exists=false" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 }

      - name: Setup Node.js (frontend)
        if: steps.check.outputs.exists == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install frontend deps
        if: steps.check.outputs.exists == 'true'
        shell: pwsh
        run: |
          cd frontend; npm ci

      - name: Run frontend build & tests
        if: steps.check.outputs.exists == 'true'
        shell: pwsh
        run: |
          cd frontend; npm run build --if-present; npm run test --if-present

      - name: Skip frontend
        if: steps.check.outputs.exists == 'false'
        run: echo "No frontend/package.json found — skipping frontend job"

  backend:
    name: Backend (Node / migrations)
    runs-on: ubuntu-latest
    needs: root
    steps:
      - uses: actions/checkout@v4

      - name: Check backend directory
        id: check-backend
        shell: pwsh
        run: |
          if (Test-Path backend\package.json) { echo "exists=true" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 } else { echo "exists=false" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 }

      - name: Setup Node.js (backend)
        if: steps.check-backend.outputs.exists == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install backend deps
        if: steps.check-backend.outputs.exists == 'true'
        shell: pwsh
        run: |
          cd backend; npm ci

      - name: Run backend lint & tests
        if: steps.check-backend.outputs.exists == 'true'
        shell: pwsh
        run: |
          cd backend; npm run lint --if-present; npm run test --if-present

      - name: Skip backend
        if: steps.check-backend.outputs.exists == 'false'
        run: echo "No backend/package.json found — skipping backend job"

  integration:
    name: Integration tests (Postgres service)
    runs-on: ubuntu-latest
    needs: [root]
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        options: >-
          --health-cmd "pg_isready -U postgres" --health-interval 10s --health-timeout 5s --health-retries 5

    env:
      SUPABASE_DB_URL: postgres://postgres:postgres@localhost:5432/postgres

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install deps
        run: npm ci
        shell: pwsh

      - name: Wait for Postgres
        run: |
          Write-Host "Waiting for Postgres to be ready...";
          $retries = 0; while ($retries -lt 10) { if (pg_isready -h localhost -p 5432 -U postgres) { break } ; Start-Sleep -Seconds 2; $retries++ }; 
        shell: pwsh

      - name: Run integration tests
        env:
          SUPABASE_DB_URL: ${{ env.SUPABASE_DB_URL }}
        run: |
          npm run test:integration
        shell: pwsh

