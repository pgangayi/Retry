name: CI - root / frontend / backend

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  root:
    name: Root (install & tests if present)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install root deps (if package.json present)
        shell: pwsh
        run: |
          if (Test-Path package.json) { npm ci } else { echo "No root package.json, skipping npm ci" }

      - name: Run root linter (if present)
        shell: pwsh
        run: |
          if (Test-Path package.json) { npm run lint --if-present } else { echo "No root package.json, skipping lint" }

      - name: Run root tests (if present)
        shell: pwsh
        run: |
          if (Test-Path package.json) { npm run test --if-present } else { echo "No root package.json, skipping tests" }

  frontend:
    name: Frontend (Vite)
    runs-on: ubuntu-latest
    needs: root
    steps:
      - uses: actions/checkout@v4

      - name: Check frontend directory
        id: check
        shell: pwsh
        run: |
          if (Test-Path frontend\package.json) { echo "exists=true" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 } else { echo "exists=false" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 }

      - name: Setup Node.js (frontend)
        if: steps.check.outputs.exists == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install frontend deps
        if: steps.check.outputs.exists == 'true'
        shell: pwsh
        run: |
          cd frontend; npm ci

      - name: Lint frontend
        if: steps.check.outputs.exists == 'true'
        shell: pwsh
        run: |
          cd frontend; npm run lint

      - name: Typecheck frontend
        if: steps.check.outputs.exists == 'true'
        shell: pwsh
        run: |
          cd frontend; npx tsc --noEmit

      - name: Run frontend unit tests
        if: steps.check.outputs.exists == 'true'
        shell: pwsh
        run: |
          cd frontend; npm run test:unit

      - name: Build frontend
        if: steps.check.outputs.exists == 'true'
        shell: pwsh
        run: |
          cd frontend; npm run build

      - name: Audit frontend
        if: steps.check.outputs.exists == 'true'
        shell: pwsh
        run: |
          cd frontend; npm audit --json > audit-report.json

      - name: Upload frontend audit report
        if: steps.check.outputs.exists == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: frontend-audit-report
          path: frontend/audit-report.json

      - name: Skip frontend
        if: steps.check.outputs.exists == 'false'
        run: echo "No frontend/package.json found — skipping frontend job"

  backend:
    name: Backend (Node / migrations)
    runs-on: ubuntu-latest
    needs: root
    steps:
      - uses: actions/checkout@v4

      - name: Check backend directory
        id: check-backend
        shell: pwsh
        run: |
          if (Test-Path backend\package.json) { echo "exists=true" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 } else { echo "exists=false" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 }

      - name: Setup Node.js (backend)
        if: steps.check-backend.outputs.exists == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install backend deps
        if: steps.check-backend.outputs.exists == 'true'
        shell: pwsh
        run: |
          cd backend; npm ci

      - name: Run backend lint & tests
        if: steps.check-backend.outputs.exists == 'true'
        shell: pwsh
        run: |
          cd backend; npm run lint --if-present; npm run test --if-present

      - name: Audit backend
        if: steps.check-backend.outputs.exists == 'true'
        shell: pwsh
        run: |
          cd backend; npm audit --json > audit-report.json

      - name: Upload backend audit report
        if: steps.check-backend.outputs.exists == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: backend-audit-report
          path: backend/audit-report.json

      - name: Skip backend
        if: steps.check-backend.outputs.exists == 'false'
        run: echo "No backend/package.json found — skipping backend job"

  integration:
    name: Integration tests (PostGIS migrations)
    runs-on: ubuntu-latest
    needs: [root]
    services:
      postgres:
        image: postgis/postgis:15-3.3
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        options: >-
          --health-cmd "pg_isready -U postgres" --health-interval 10s --health-timeout 5s --health-retries 5

    env:
      SUPABASE_DB_URL: postgres://postgres:postgres@localhost:5432/postgres

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install root deps
        run: npm ci
        shell: pwsh

      - name: Wait for Postgres
        run: |
          Write-Host "Waiting for Postgres to be ready...";
          $retries = 0; while ($retries -lt 10) { if (pg_isready -h localhost -p 5432 -U postgres) { break } ; Start-Sleep -Seconds 2; $retries++ };
        shell: pwsh

      - name: Apply migrations
        run: |
          Write-Host "Applying migrations...";
          psql -h localhost -p 5432 -U postgres -d postgres -f migrations/0001_enable_postgis.sql
          psql -h localhost -p 5432 -U postgres -d postgres -f migrations/0002_core_inventory_finance.sql
          psql -h localhost -p 5432 -U postgres -d postgres -f migrations/0003_operations_idempotency_and_rls.sql
          psql -h localhost -p 5432 -U postgres -d postgres -f migrations/0004_fn_apply_treatment.sql
          psql -h localhost -p 5432 -U postgres -d postgres -f migrations/0005_audit_logs_and_operations.sql
        shell: pwsh

      - name: Smoke test migrations
        run: |
          psql -h localhost -p 5432 -U postgres -d postgres -c "SELECT COUNT(*) FROM farms;"
        shell: pwsh

      - name: Run integration tests
        env:
          SUPABASE_DB_URL: ${{ env.SUPABASE_DB_URL }}
        run: |
          npm run test:integration
        shell: pwsh

